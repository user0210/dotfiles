#!/bin/bash
# This script is executed every time a theme is applied.
# Each generator can have it's own _mondo-apply script.

# The default syntax is bash, but by changing the shebang,
# one could use another language (f.i. perl or python).

# $1 is equal to: $MONOD_DIR/generator/TYPE/THEME[.extensions]

# If this script is not needed, this file can safely be removed.
# (removing the file, will improve execution speed)

# MONDO_DIR="${1%%/generator*}"
# THIS_DIR="${1%/*}"
# THIS_GENERATOR="${THIS_DIR##*/}"
# THIS_FILE="${1##*/}"
# THIS_THEME="${THIS_FILE%.*}"

# To source the settings file one could use this:
# source "${THIS_DIR}/_mondo-settings"

###################################################################################################
cat > ~/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/themes/templer.lua << EOF

-- THIS FILE IS CREATED BY MONDO !!

local modules = require('lualine_require').lazy_require { notices = 'lualine.utils.notices' }

local function add_notice(notice)
  modules.notices.add_notice('theme(base16): ' .. notice)
end

local function setup(colors)
  local theme = {
    normal = {
      a = { fg = colors.base00, bg = colors.base0Da },
      b = { fg = colors.base07, bg = colors.base0Da },
      c = { fg = colors.base07, bg = colors.base0Da },
      z = { fg = colors.base00, bg = colors.base0Da },
    },
    replace = {
      a = { fg = colors.base00, bg = colors.base09a },
      b = { fg = colors.base07, bg = colors.base0Da },
      c = { fg = colors.base07, bg = colors.base0Da },
      z = { fg = colors.base00, bg = colors.base0Da },
    },
    insert = {
      a = { fg = colors.base00, bg = colors.base0Ba },
      b = { fg = colors.base07, bg = colors.base0Da },
      c = { fg = colors.base07, bg = colors.base0Da },
      z = { fg = colors.base00, bg = colors.base0Da },
    },
    visual = {
      a = { fg = colors.base00, bg = colors.base0Ea },
      b = { fg = colors.base07, bg = colors.base0Da },
      c = { fg = colors.base07, bg = colors.base0Da },
      z = { fg = colors.base00, bg = colors.base0Da },
    },
    inactive = {
      a = { fg = colors.base00, bg = colors.base0Da },
      b = { fg = colors.base07, bg = colors.base0Da },
      c = { fg = colors.base07, bg = colors.base0Da },
      z = { fg = colors.base00, bg = colors.base0Da },
    },
  }

  theme.command = theme.normal
  theme.terminal = theme.insert

  return theme
end

local function setup_default()
  return setup {
	base00 = '#1d2021',
	base01 = '#3c3836',
	base02 = '#504945',
	base03 = '#665c54',
	base04 = '#bdae93',
	base05 = '#d5c4a1',
	base06 = '#ebdbb2',
	base07 = '#fbf1c7',
	base08 = '#fb4934',
	base09 = '#fe8019',
	base0A = '#fabd2f',
	base0B = '#b8bb26',
	base0C = '#8ec07c',
	base0D = '#83a598',
	base0E = '#d3869b',
	base0F = '#d65d0e',
	base08a = '#DB2914',
	base09a = '#DE6000',
	base0Aa = '#DA9D0F',
	base0Ba = '#989B06',
	base0Ca = '#6EA05C',
	base0Da = '#638578',
	base0Ea = '#B3667B',
	base0Fa = '#B63D00',
  }
end

local function setup_base16()
  local loaded, base16 = pcall(require, 'base16-colorscheme')

  if not loaded then
    add_notice(
      'nvim-base16 is not currently present in your runtimepath, make sure it is properly installed,'
        .. ' fallback to default colors.'
    )

    return nil
  end

  if not base16.colors and not vim.env.BASE16_THEME then
    add_notice(
      'nvim-base16 is not loaded yet, you should update your configuration to load it before lualine'
        .. ' so that the colors from your colorscheme can be used, fallback to "tomorrow-night" theme.'
    )
  elseif not base16.colors and not base16.colorschemes[vim.env.BASE16_THEME] then
    add_notice(
      'The colorscheme "%s" defined by the environment variable "BASE16_THEME" is not handled by'
        .. ' nvim-base16, fallback to "tomorrow-night" theme.'
    )
  end

  local colors = base16.colors or base16.colorschemes[vim.env.BASE16_THEME or 'tomorrow-night']

  return setup {
	base00 = colors.base00,
	base01 = colors.base01,
	base02 = colors.base02,
	base03 = colors.base03,
	base04 = colors.base04,
	base05 = colors.base05,
	base06 = colors.base06,
	base07 = colors.base07,
	base08 = colors.base08,
	base09 = colors.base09,
	base0A = colors.base0A,
	base0B = colors.base0B,
	base0C = colors.base0C,
	base0D = colors.base0D,
	base0E = colors.base0E,
	base0F = colors.base0F,
	base08a = colors.base08a,
	base09a = colors.base09a,
	base0Aa = colors.base0Aa,
	base0Ba = colors.base0Ba,
	base0Ca = colors.base0Ca,
	base0Da = colors.base0Da,
	base0Ea = colors.base0Ea,
	base0Fa = colors.base0Fa,
  }
end

return setup_base16() or setup_default()

EOF ###############################################################################################
###################################################################################################


neovim-reload.py
