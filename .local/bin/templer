#!/bin/bash


XFOLDER=${HOME}/.config/X11/xfiles


########################################
createbasecolors() { ###################

	fileorpath=$1
	for f in $fileorpath; do
	    col0=$(grep "color0" $2 | grep -o "#......")
	    col7=$(grep "color7" $2 | grep -o "#......")
	    col8=$(grep "color8" $2 | grep -o "#......")
	    col15=$(grep "color15" $2 | grep -o "#......")
	    light=$(colort -c $col0 && printf 0 || printf 1)
		if [ "$light" -eq 0 ]; then
	        col0a=$(colort -l -15 $col0)
	        col8a=$(colort -l -30 $col8)
	        col7a=$(colort -l 30 $col7)
	        col15a=$(colort -l 15 $col15)
	    else
	        col0a=$(colort -l 15 $col0)
	        col8a=$(colort -l 30 $col8)
	        col7a=$(colort -l -30 $col7)
	        col15a=$(colort -l -15 $col15)
	    fi
		echo "base00 : $col0"
		echo "base01 : $col0a"
		echo "base02 : $col8"
		echo "base03 : $col8a"
		echo "base04 : $col7a"
		echo "base05 : $col7"
		echo "base06 : $col15a"
		echo "base07 : $col15"
	done
}


########################################
createdarkcolors() { ###################

	fileorpath=$1
	for f in $fileorpath; do
	    col0=$(grep "^base00" $f | grep -o "#......")
	    col8=$(grep "^base08" $f | grep -o "#......")
	    col9=$(grep "^base09" $f | grep -o "#......")
	    colA=$(grep "^base0A" $f | grep -o "#......")
	    colB=$(grep "^base0B" $f | grep -o "#......")
	    colC=$(grep "^base0C" $f | grep -o "#......")
	    colD=$(grep "^base0D" $f | grep -o "#......")
	    colE=$(grep "^base0E" $f | grep -o "#......")
	    colF=$(grep "^base0F" $f | grep -o "#......")
	    light=$(colort -c $col0 && printf 0 || printf 1)
		if [ "$light" -eq 0 ]; then
	        col8a=$(colort -l -32 $col8)
	        col9a=$(colort -l -32 $col9)
	        colAa=$(colort -l -32 $colA)
	        colBa=$(colort -l -32 $colB)
	        colCa=$(colort -l -32 $colC)
	        colDa=$(colort -l -32 $colD)
	        colEa=$(colort -l -32 $colE)
	        colFa=$(colort -l -32 $colF)
	    else
	        col8a=$(colort -l 32 $col8)
	        col9a=$(colort -l 32 $col9)
	        colAa=$(colort -l 32 $colA)
	        colBa=$(colort -l 32 $colB)
	        colCa=$(colort -l 32 $colC)
	        colDa=$(colort -l 32 $colD)
	        colEa=$(colort -l 32 $colE)
	        colFa=$(colort -l 32 $colF)
	    fi
	    echo "base08a : $col8a"
	    echo "base09a : $col9a"
	    echo "base0Aa : $colAa"
	    echo "base0Ba : $colBa"
	    echo "base0Ca : $colCa"
	    echo "base0Da : $colDa"
	    echo "base0Ea : $colEa"
	    echo "base0Fa : $colFa"
	done
}


########################################
setwallpaper() { #######################

	wallpaper=$(nsxiv -d -N wallman -to ${XFOLDER}/background/wallpapers | head -n 1)
	if [ -z "$wallpaper" ] ;then
		echo "nothing"
	else
		cleanup
		hsetroot -fill $wallpaper
		sed -i "s|^hsetroot.*|hsetroot -fill $wallpaper|g" ${HOME}/.local/bin/dwm-starter
		sed -i "s/^corner-radius = .*/corner-radius = 5;/g" ~/.config/picom/picom.conf
	fi
}


########################################
setxresources() { ######################

	theme=$(ls ${HOME}/.config/mondo/themes | grep "^[^._]" | dmenu -p "theme: ")
	if [ -z "$theme" ] ;then
		echo "nothing"
	else
		cleanup
		mondo -a $theme
		convert ${XFOLDER}/background/bitmap-walls/patterns/dots_wide.xbm \
			-fill "$(xrdb -query|awk '/\*color0:/ {print $2}')" -opaque "#000000" \
			-fill "$(xrdb -query|awk '/\*color8:/ {print $2}')" -opaque "#ffffff" \
			${XFOLDER}/background/png-walls/xbm.png
		hsetroot -tile ${XFOLDER}/background/png-walls/xbm.png
	
		sed -i "s/^hsetroot -fill.*/hsetroot -tile \${HOME}\/.config\/X11\/xfiles\/background\/png-walls\/xbm\.png/g" ~/.local/bin/dwm-starter
		sed -i "s/^corner-radius = .*/corner-radius = 0;/g" ~/.config/picom/picom.conf
	fi
}


########################################
generatesample() { #####################

	SCHEMEFILE=${XFOLDER}/templer/schemes/$backend.sh

	echo "base00 $(echo $monos | cut -d' ' -f1)" >> ${SCHEMEFILE}
	echo "base01 $(echo $monos | cut -d' ' -f2)" >> ${SCHEMEFILE}
	echo "base02 $(echo $monos | cut -d' ' -f3)" >> ${SCHEMEFILE}
	echo "base03 $(echo $monos | cut -d' ' -f4)" >> ${SCHEMEFILE}
	echo "base04 $(echo $monos | cut -d' ' -f5)" >> ${SCHEMEFILE}
	echo "base05 $(echo $monos | cut -d' ' -f6)" >> ${SCHEMEFILE}
	echo "base06 $(echo $monos | cut -d' ' -f7)" >> ${SCHEMEFILE}
	echo "base07 $(echo $monos | cut -d' ' -f8)" >> ${SCHEMEFILE}
	
	echo "base08 $(echo $lcolors | cut -d' ' -f1)" >> ${SCHEMEFILE}
	echo "base09 $(echo $lcolors | cut -d' ' -f2)" >> ${SCHEMEFILE}
	echo "base0A $(echo $lcolors | cut -d' ' -f3)" >> ${SCHEMEFILE}
	echo "base0B $(echo $lcolors | cut -d' ' -f4)" >> ${SCHEMEFILE}
	echo "base0C $(echo $lcolors | cut -d' ' -f5)" >> ${SCHEMEFILE}
	echo "base0D $(echo $lcolors | cut -d' ' -f6)" >> ${SCHEMEFILE}
	echo "base0E $(echo $lcolors | cut -d' ' -f7)" >> ${SCHEMEFILE}
	echo "base0F $(echo $lcolors | cut -d' ' -f8)" >> ${SCHEMEFILE}
	
	echo "base08a $(echo $colors | cut -d' ' -f1)" >> ${SCHEMEFILE}
	echo "base09a $(echo $colors | cut -d' ' -f2)" >> ${SCHEMEFILE}
	echo "base0Aa $(echo $colors | cut -d' ' -f3)" >> ${SCHEMEFILE}
	echo "base0Ba $(echo $colors | cut -d' ' -f4)" >> ${SCHEMEFILE}
	echo "base0Ca $(echo $colors | cut -d' ' -f5)" >> ${SCHEMEFILE}
	echo "base0Da $(echo $colors | cut -d' ' -f6)" >> ${SCHEMEFILE}
	echo "base0Ea $(echo $colors | cut -d' ' -f7)" >> ${SCHEMEFILE}
	echo "base0Fa $(echo $colors | cut -d' ' -f8)" >> ${SCHEMEFILE}
	
	convert -size 800x300 xc:none \
	-fill "$(echo $monos | cut -d' ' -f1)"  -draw "rectangle 0,0 100,100" \
	-fill "$(echo $monos | cut -d' ' -f2)"  -draw "rectangle 100,0 200,100" \
	-fill "$(echo $monos | cut -d' ' -f3)"  -draw "rectangle 200,0 300,100" \
	-fill "$(echo $monos | cut -d' ' -f4)"  -draw "rectangle 300,0 400,100" \
	-fill "$(echo $monos | cut -d' ' -f5)"  -draw "rectangle 400,0 500,100" \
	-fill "$(echo $monos | cut -d' ' -f6)"  -draw "rectangle 500,0 600,100" \
	-fill "$(echo $monos | cut -d' ' -f7)"  -draw "rectangle 600,0 700,100" \
	-fill "$(echo $monos | cut -d' ' -f8)"  -draw "rectangle 700,0 800,100" \
	-fill "$(echo $colors | cut -d' ' -f1)" -draw "rectangle 0,100 100,200" \
	-fill "$(echo $colors | cut -d' ' -f2)" -draw "rectangle 100,100 200,200" \
	-fill "$(echo $colors | cut -d' ' -f3)" -draw "rectangle 200,100 300,200" \
	-fill "$(echo $colors | cut -d' ' -f4)" -draw "rectangle 300,100 400,200" \
	-fill "$(echo $colors | cut -d' ' -f5)" -draw "rectangle 400,100 500,200" \
	-fill "$(echo $colors | cut -d' ' -f6)" -draw "rectangle 500,100 600,200" \
	-fill "$(echo $colors | cut -d' ' -f7)" -draw "rectangle 600,100 700,200" \
	-fill "$(echo $colors | cut -d' ' -f8)" -draw "rectangle 700,100 800,200" \
	-fill "$(echo $lcolors | cut -d' ' -f1)" -draw "rectangle 0,200 100,300" \
	-fill "$(echo $lcolors | cut -d' ' -f2)" -draw "rectangle 100,200 200,300" \
	-fill "$(echo $lcolors | cut -d' ' -f3)" -draw "rectangle 200,200 300,300" \
	-fill "$(echo $lcolors | cut -d' ' -f4)" -draw "rectangle 300,200 400,300" \
	-fill "$(echo $lcolors | cut -d' ' -f5)" -draw "rectangle 400,200 500,300" \
	-fill "$(echo $lcolors | cut -d' ' -f6)" -draw "rectangle 500,200 600,300" \
	-fill "$(echo $lcolors | cut -d' ' -f7)" -draw "rectangle 600,200 700,300" \
	-fill "$(echo $lcolors | cut -d' ' -f8)" -draw "rectangle 700,200 800,300" \
	${XFOLDER}/templer/samples/$backend.png
}


########################################
cleanup() { ############################

	killall gifview 2> /dev/null
	sed -i '/gifview/ s/^#*/#/' ${HOME}/.local/bin/dwm-starter
	rm ${XFOLDER}/templer/samples/* 2> /dev/null
	rm ${XFOLDER}/templer/schemes/* 2> /dev/null
	rm ${HOME}/.config/mondo/themes/templer 2> /dev/null
}


########################################
colorsplitter() { ######################

	colors=$(echo $scheme | cut -d' ' -f $1)
	lcolors=$(echo $lscheme | cut -d' ' -f $1)
	generatesample
	if [ 'null' = "$2" ]; then
		return
	fi
	backend="$backend""2"
	colors=$(echo $scheme | rev | cut -d' ' -f $2 | rev)
	lcolors=$(echo $lscheme | rev | cut -d' ' -f $2 | rev)
	generatesample
}


########################################
colorshift() { #########################

	col=$(pastel $1 0.10 $col | pastel format hex)
	test=$(pastel to-gray $col | pastel format hex)
	colort -l $2 $test > /dev/null
}


########################################
colorgenerator_1() { ###################

	simple=0 # TODO: do something with this!
	if [[ "schemer" == "$1" ]]; then ##  SCHEMER 2  ##
		echo "schemer does his job"
		scheme=$(schemer2 --threshold 50 -minBright 70 -maxBright 90 -format img::colors -in $wallpaper)
		if [[ "Could not get colors from image with settings specified. Aborting." == "$scheme" ]]; then 
			simple=1
			scheme=$(schemer2 -format img::colors -in $wallpaper | pastel sort-by hue | pastel format hex)
		elif [[ "$(echo $scheme | cut -d' ' -f1)" == "$(echo $scheme | cut -d' ' -f3)" ]]; then
			simple=1
			scheme=$(schemer2 --threshold 20 -minBright 50 -maxBright 90 -format img::colors -in $wallpaper)
			scheme=$(pastel -f sort-by hue  $scheme | pastel format hex)
			# scheme=$(pastel -f saturate 0.2 $scheme | pastel sort-by hue | pastel format hex)
		else
			scheme=$(pastel -f sort-by hue $scheme | pastel format hex)
			# scheme=$(pastel -f saturate 0.1 $scheme | pastel sort-by hue | pastel format hex)
		fi
		monos=$(schemer2 --threshold 70 -minBright 30 -maxBright 220 -format img::colors -in $wallpaper)
	elif [[ "colorz" == "$1" ]]; then ##  COLORZ  ##
		echo "colorz does his job"
		scheme=$(colorz --bold 0 --minv 130 --maxv 160 --no-preview -n 16 $wallpaper | cut -d " " -f1)
		monos=$(colorz --bold 0 --minv 10 --maxv 240 --no-preview -n 8 $wallpaper | cut -d " " -f1)
	fi

	monos=$(pastel -f desaturate 0.25 $monos | pastel sort-by brightness | pastel format hex)

	black=$(echo $monos | cut -d' ' -f1)
	colort -l -30 $black > /dev/null || black=$(pastel mix $black "#000000" | pastel format hex)
	colort -l -30 $black > /dev/null
	while [[ "$?" == "0" ]]
	do
		black=$(colort -l -20 $black)
		colort -l -30 $black > /dev/null
	done

	white=$(echo $monos | rev | cut -d' ' -f1 | rev)
	colort -l 40 $white > /dev/null || white=$(pastel mix $white "#ffffff" | pastel format hex)
	colort -l 40 $white > /dev/null
	while [[ "$?" == "0" ]]
	do
		white=$(pastel lighten 20 $white | pastel format hex)
		colort -l 40 $white > /dev/null
	done

	monos=$(pastel gradient -s RGB -n 8 $black $white | pastel format hex)

	colort -c "$(echo $scheme | cut -d' ' -f1)"
	if [[ "$?" == "0" ]]; then
		lscheme=$(pastel lighten 0.25 $scheme | pastel format hex)
	else
		lscheme=$scheme
		scheme=$(pastel darken 0.25 $scheme | pastel format hex)
	fi

	dark=$(pastel -f saturate 0.1 $scheme | pastel sort-by hue | pastel format hex)
	light=$(pastel -f saturate 0.1 $lscheme | pastel sort-by hue | pastel format hex)
	scheme=""
	lscheme=""
	for col in $(cat); do
		test=$(pastel to-gray $col | pastel format hex)
		colort -l -140 $test > /dev/null
		while [[ "$?" == "0" ]]
		do
			colorshift darken -140
		done
		colort -l 170 $test > /dev/null
		while [[ "$?" == "0" ]]
		do
			colorshift lighten 170
		done
		scheme="$scheme $col"
	done <<< $dark
	for col in $(cat); do
		test=$(pastel to-gray $col | pastel format hex)
		colort -l -180 $test > /dev/null
		while [[ "$?" == "0" ]]
		do
			colorshift darken -180
		done
		colort -l 140 $test > /dev/null
		while [[ "$?" == "0" ]]
		do
			colorshift lighten 140
		done
		lscheme="$lscheme $col"
	done <<< $light

	colorsplitter "2,4,6,8,10,12,14,16" "null"
	backend="$backend""2"
	colorsplitter "1,3,5,7,9,11,13,16" "null"
}


########################################
colorgenerator_2() { ###################

	if [[ "convert" == "$1" ]]; then ##  CONVERT  ## 
		echo "convert does his job"
		scheme=$(convert $wallpaper -depth 8 +dither -colors 16 -unique-colors txt: | tail -n +2 | cut -d" " -f4 | tac)
	elif [[ "pigmnts" == "$1" ]]; then ##  PIGMNTS  ## 
		echo "pigmnts does his job"
		scheme=$(pigmnts -c 16 $wallpaper -q)
	fi

	scheme=$(pastel -f saturate 0.1 $scheme | pastel sort-by luminance | pastel format hex)
	black=$(echo $scheme | cut -d' ' -f1)
	white=$(echo $scheme | rev | cut -d' ' -f1 | rev)
	colors=""
	for col in $(cat); do
		black=$(colort -l -15 $col > /dev/null && (colort -l 210 $col > /dev/null && echo $col || echo $black) || echo $black)
		white=$(colort -l 15 $col > /dev/null && (colort -l -200 $col > /dev/null && echo $col || echo $white) || echo $white)
		append=$(colort -l -55 $col > /dev/null && (colort -l 55 $col > /dev/null && echo "1" || echo "0") || echo "0")
		if [[ "$append" == "1" ]]; then
			colors="$colors $col"
		fi
	done <<< $scheme

	black=$(pastel -f desaturate 0.3 $black | pastel format hex)
	colort -l -30 $black > /dev/null || black=$(pastel mix $black "#000000" | pastel format hex)

	colort -l -40 $black > /dev/null
	while [[ "$?" == "0" ]]
	do
		black=$(colort -l -30 $black)
		colort -l -40 $black > /dev/null
	done

	colort -l 40 $white > /dev/null || white=$(pastel mix $white "#ffffff" | pastel format hex)
	colort -l 40 $white > /dev/null
	while [[ "$?" == "0" ]]
	do
		white=$(pastel lighten 20 $white | pastel format hex)
		colort -l 40 $white > /dev/null
	done

	monos=$(pastel gradient -s RGB -n 8 $black $white | pastel format hex)
	colors=$(pastel sort-by hue $colors | pastel format hex)
	scheme=""
	lscheme=""
	for col in $(cat); do
		dark=$(colort -c $col > /dev/null && echo "1" || echo "0")
		if [[ "$dark" == "1" ]]; then
			test=$(pastel to-gray $col | pastel format hex)
			colort -l -140 $test > /dev/null
			while [[ "$?" == "0" ]]
			do
				colorshift darken -140
			done
			colort -l 170 $test > /dev/null
			while [[ "$?" == "0" ]]
			do
				colorshift lighten 170
			done

			lscheme="$lscheme $(pastel lighten 0.25 $col | pastel format hex)"
			scheme="$scheme $col"
		else
			test=$(pastel to-gray $col | pastel format hex)
			colort -l -180 $test > /dev/null
			while [[ "$?" == "0" ]]
			do
				colorshift darken -180
			done
			colort -l 140 $test > /dev/null
			while [[ "$?" == "0" ]]
			do
				colorshift lighten 140
			done

			scheme="$scheme $(pastel darken 0.25 $col | pastel format hex)"
			lscheme="$lscheme $col"
		fi
	done <<< $colors
	
	n=$(echo $scheme | wc -w)
	if [ "$n" -lt 8 ]; then
		return
	elif [ "$n" -eq 8 ]; then
		colorsplitter "1-8" "null"
	elif [ "$n" -eq 9  ]; then
		colorsplitter "1-8" "1-8"
	elif [ "$n" -eq 10  ]; then
		colorsplitter "1,2,4,5,6,7,8,10" "1,2,4,5,6,7,8,10"
	elif [ "$n" -eq 11  ]; then
		colorsplitter "1,2,4,5,6,8,9,11" "1,2,4,5,6,8,9,11"
	elif [ "$n" -eq 12  ]; then
		colorsplitter "1,2,4,5,7,9,10,12" "1,2,4,5,7,9,10,12"
	elif [ "$n" -eq 13  ]; then
		colorsplitter "1,3,4,6,7,9,10,12" "1,3,4,6,7,9,10,12"
	elif [ "$n" -eq 14  ]; then
		colorsplitter "1,2,4,6,8,10,12,14" "1,2,4,6,8,10,12,14"
	elif [ "$n" -eq 15  ]; then
		colorsplitter "1,3,5,7,9,11,13,15" "1,2,4,6,8,10,12,14"
	elif [ "$n" -eq 16  ]; then
		colorsplitter "1,3,5,7,9,11,13,15" "1,3,5,7,9,11,13,15"
	fi
}


########################################
setwallpapercolors() { #################

	cleanup

	if [ '[wallpaper-theme]' = "$1" ]; then
		wallpaper=$(nsxiv -d -N wallman -to ${XFOLDER}/background/wallpapers | head -n 1)
	else
		wallpaper=$(nsxiv -d -N wallman -to $(find ${XFOLDER}/background/paperview -name "image*") | head -n 1)
		gif=$(sed "s/\image.jpg$/1366x768.gif/" <<<"$wallpaper")
	fi

	if [ -z "$wallpaper" ]; then
		echo "no wallpaper choosen -> abort"; return
	else
		hsetroot -fill $wallpaper
	fi

	if [ ! -z "$gif" ]; then
		sed -i "/gifview/ s|.*|nice -n 15 xwinwrap -b -s -fs -st -sp -un -nf -ov -fdt -- gifview -w WID $gif -a &|" ${HOME}/.local/bin/dwm-starter
		nice -n 15 xwinwrap -b -s -fs -st -sp -un -nf -ov -fdt -- gifview -w WID $gif -a &
	fi
	
	## create backend... 
	backendlist="schemer convert colorz pigmnts" # backends: schemer, convert, colorz, pigmnts
	echo "$backendlist" | tr ' ' '\n' | while read backend; do
		if [[ "schemer" == "$backend" ]] || [[ "colorz" == "$backend" ]]; then
			colorgenerator_1 $backend
		elif [[ "convert" == "$backend" ]] || [[ "pigmnts" == "$backend" ]]; then
			colorgenerator_2 $backend
		else
			continue
		fi
	done

	## choose backend... 
	backend=$(nsxiv -d -N wallman -to ${XFOLDER}/templer/samples/* | head -n 1 | sed "s/.*\///" | sed "s/\.png$//")
	if [ -z "$backend" ] ;then
		echo "no backend choosen -> abort"; return
	fi

	## connect color-theme to mondo...
	ln -fs ${XFOLDER}/templer/schemes/$backend".sh" ${HOME}/.config/mondo/themes/templer
	mondo -f -g templer

	## make wallpaper permanent
	sed -i "s|^hsetroot.*|hsetroot -fill $wallpaper|g" ${HOME}/.local/bin/dwm-starter
	sed -i "s/^corner-radius = .*/corner-radius = 5;/g" ~/.config/picom/picom.conf

	## apply theme on templates
	mondo -a templer
}


########################################
templer_menu() { #######################

	templer="[wallpaper]\n[wallpaper-theme]\n[paperview]\n[xresources-theme]"
	template=$(printf "${templer}" | dmenu -p "template: ")

	if [ '[wallpaper]' = "$template" ]; then			###  SET-WALLPAPER  ###
		setwallpaper
	elif [ '[xresources-theme]' = "$template" ]; then	###  TERMINAL-COLORS  ###
		setxresources
	elif [ '[wallpaper-theme]' = "$template" ]; then	###  WALLPAPER-COLORS  ###
		setwallpapercolors $template
	elif [ '[paperview]' = "$template" ]; then			###  WALLPAPER-COLORS  ###
		setwallpapercolors $template
	fi
	
	## this gets the bar geometry with xwininfo and a patched dwm that sets the bar-name/class
	# gapp=$(xwininfo -name dwmbar | grep -E 'Absolute.*X' | grep -oE '[^ ]+$')
	# width=$(xwininfo -name dwmbar | grep -E 'Width' | grep -oE '[^ ]+$')
	# if [ -z "$gapp" ]; then gapp=0; fi
	# if [ -z "$width" ]; then gapp=8000; fi
	# geometry=$(echo "${width}x110+${gapp}+${gapp}")
}


case "$1" in
	color)	createdarkcolors $2 ;;
	base)	createbasecolors $2 ;;
	*)		templer_menu ;;
esac
